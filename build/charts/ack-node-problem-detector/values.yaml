# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
images:
  npd:
    image: oecp/node-problem-detector
    tag: v0.2
k8s_namespace: kube-system
globalconfig:
  RegistryURL: registry.cn-hangzhou.aliyuncs.com

npd:
  # Custom monitor definitions to add to Node Problem Detector - to be
  # mounted at /custom-config. These are in addition to pre-packaged monitor
  # definitions provided within the default docker image available at /config:
  # https://github.com/kubernetes/node-problem-detector/tree/master/config
  enabled: true
  log_monitors:
    - /config/kernel-monitor.json
    - /config/docker-monitor.json
    # An example of activating a custom log monitor definition in
    # Node Problem Detector
    # - /custom-config/docker-monitor-filelog.json
    # remove - public_network_check
  alibaba_cloud_plugins:
    - ntp_check
    - network_problem_check
    - inodes_usage_check
    - pid_pressure_check
    - docker_offline_check
    - instance_expired_check
    #- ram_role_check
    #- csi_hang_check
    #- ps_hang_check
    #- nvidia_gpu_check
    #- public_network_check
    #- irqbalance_check
    #- fd_check    ##don't open the fd_check on the host whose operating system is AliyunLinux2, otherwise it will cause some problems

  plugin_settings:
    check_fd_warning_percentage: 80
    inode_warning_percentage: 80

  ##
  serviceaccount: "ack-node-problem-detector"
  ##

  hostpath:
    logdir: /var/log/

  image:
#    origin: registry-vpc.cn-zhangjiakou.aliyuncs.com/acs/node-problem-detector:v0.6.3-29-71bd5f8
#    amd64: registry.cn-hangzhou.aliyuncs.com/oecp/node-problem-detector:v0.6.3-29-71bd5f8
#    origin: registry.cn-hangzhou.aliyuncs.com/acs/node-problem-detector:v0.8.10-e0ff7d2
#    arm64: registry.cn-hangzhou.aliyuncs.com/oecp/node-problem-detector:v0.8.10-e0ff7d2-arm64
#    repository: registry.cn-hangzhou.aliyuncs.com/oecp/node-problem-detector
#    tag: "v0.1"

  nameOverride: ""
  fullnameOverride: ""

  resources:
    limits:
      cpu: 100m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 200Mi

  annotations: { }

  tolerations: [ ]
  ## - key: "key1"
  ##   operator: "Equal"
  ##   value: "value1"
  ##   effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: type
                operator: NotIn
                values:
                  - virtual-kubelet

controller:
  regionId: cn-zhangjiakou
  clusterType: __ACK_CLUSTER_TYPE__
  # supported since 1.7.0 version
  clusterId: __ACK_CLUSTER_ID__
  clusterName: __ACK_CLUSTER_NAME__
  # when ramRoleType=restricted
  ramRoleType: __ACK_RAM_ROLE_TYPE__

eventer:
  image:
    repository: registry-vpc.cn-zhangjiakou.aliyuncs.com/acs/kube-eventer-amd64
    tag: "v1.2.4-0f5aaee-aliyun"
    pullPolicy: IfNotPresent
  # Set environment variables.
  env:
    - TZ: Asia/Shanghai
  #- AccessKeyId: ""
  #- AccessKeySecret: ""
  #- RegionId: ""

  sinks:
    sls:
      # If you want the monitoring results to be notified by sls, set enabled to true.
      # sls log project
      enabled: false
      # You can view the project information by logging in to the
      # SLS console. Please fill in the name of the project here.
      # eg: your project name is k8s-log-cc18a5f3443dhdss22654da,
      # then you can fill k8s-log-cc18a5f3443dhdss22654da to project label.
      project: "k8s-log-__ACK_CLUSTER_ID__"
      # if you want to use event center,logstore must be k8s-event. so You'd better not change this value.
      logstore: "k8s-event"
      # topic of sls logstore(optional,default:"")
      topic: ""
      #Whether it is an intranet domain name
      internal: true
      # You can view the project information by logging in to the
      # SLS console. Please fill the logstore address in here.
    dingtalk:
      enabled: false
      # If you want the monitoring results to be notified by DingDing, set enabled to true.
      level: "Warning"
      # Here you can set the cluster alarm level, the default is Warning.
      # Here you can choose Warning or Normal.
      label: ""
      # label specifies the cluster ID information, you can specify
      # your cluster ID here.eg: If your cluster_id is cc18a5f3443dhdss22654da,
      # you can set  label to cc18a5f3443dhdss22654da.
      monitorkinds: "Node,Pod"
      # Dingtalk can monitor the problems in the cluster in real time
      # according to the type of kind (e.g, Node,Pod).The kind type can be one or more.
      monitornamespaces: ""
      # Dingtalk can monitor the problems in the cluster in real time
      # according to the namespace.You can monitor one or more namespaces
      # in real time. eg: If you want to monitor the namespace of the
      # kube-system and myspace,so you can write kube-system,myspace.
      # And then, if the kube-system and myspace happend events ,they can
      # told you at first time.
      token: ""
      # What needs to be filled in here is the access_token in the webhook
      # of the DingDing robot.For how to view the robot webhook, please refer to
      # https://yq.aliyun.com/articles/636586?spm=a2c4e.11155435.0.0.60dc3312zYr8eS.
      # eg: your robot webhook is https://oapi.dingtalk.com/robot/send?
      # access_token=10d1b72d337219ef8170c78b5c94126b19ab406aeae81b2a7c4ae2bfde110842,
      # So,you can fill the token label with 10d1b72d337219ef8170c78b5c94126b19ab406aeae81b2a7c4ae2bfde110842.
    eventbridge:
      # If you want the monitoring results to be notified by EventBridge,
      # first, you need to access to EventBridgeset (https://eventbridge.console.aliyun.com)
      # then set enabled to true.
      # You can visit EventBridge website to get more information. https://eventbridge.console.aliyun.com
      enabled: false
  othersinks:
  #- elasticsearch:http://127.0.0.1:9200?sniff=false&ver=6

