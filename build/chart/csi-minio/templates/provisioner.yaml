kind: Deployment
apiVersion: apps/v1
metadata:
  name: csi-minio-provisioner
  namespace: {{ .Values.namespace }}
  labels:
    trident-app: csi-minio
spec:
  selector:
    matchLabels:
      app: csi-minio-provisioner
  replicas: 2
  template:
    metadata:
      labels:
        app: csi-minio-provisioner
        trident-app: csi-minio
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
      - operator: Exists
        effect: NoSchedule
        key: node-role.kubernetes.io/master
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: csi-minio-provisioner
              topologyKey: kubernetes.io/hostname
            {{- if not .Values.globalconfig.DisableFailureDomain }}
            - labelSelector:
                matchLabels:
                  app: csi-minio-provisioner
              topologyKey: failure-domain.beta.kubernetes.io/zone
            {{- end }}
      serviceAccount: csi-minio
      containers:
        - name: csi-provisioner
          image: "{{ .Values.globalconfig.RegistryURL }}/{{ .Values.images.provisioner.image }}:{{ .Values.images.provisioner.tag }}"
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=4"
            - "--volume-name-prefix=minio"
            - "--leader-election=true"
          env:
            - name: ADDRESS
              value: /var/lib/kubelet/plugins/{{ .Values.csi_name }}/csi.sock
            - name: TZ
              value: Asia/Shanghai
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 500Mi
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/kubelet/plugins/{{ .Values.csi_name }}
      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/{{ .Values.csi_name }}
            type: DirectoryOrCreate
