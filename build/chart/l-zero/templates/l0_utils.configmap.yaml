apiVersion: v1
kind: ConfigMap
metadata:
  name: l0-utils
  namespace: {{ .Values.k8s_namespace }}
  labels:
    trident-app: l-zero
data:
  content: |
    #!/usr/bin/env bash

    Wait() {
        while [[ true ]]; do
          kubectl get node >> /dev/null
          if [ `echo $?` -ne 0 ]; then
            sleep 5
          else
            return 0
          fi
        done
    }
    Wait

    TestResults=""
    lastTime=`date  +%s`

    SendRequest() {
      REAL_URL=$1
      if [[ "$REAL_URL" == "" ]];then
        echo "SendRequest URL is empty, failed" >&2
        exit 2
      fi
      SEND_SUCCESS=false
      for i in `seq 1 5`;do
        curl -X POST ${REAL_URL} --data-urlencode "podName=${POD_NAME}" \
          --data-urlencode "namespace=${NAMESPACE}" \
          --data-urlencode "authoritativeInstance=${INSTANCE_NAME}" \
          --data-urlencode "message=${Message}" \
          --data-urlencode "triggerType=${TRIGGER_TYPE}" \
          --data-urlencode "controllerType=${CONTROLLER_TYPE}" >/dev/null 2>&1
        if [[ $? -eq 0 ]];then
          SEND_SUCCESS=true
          break
        fi
        sleep 5
      done
    }

    Return() {
      if [[ $# -ne 1 ]];then
        echo "Usage: Return MESSAGE"
        exit 1
      fi
      Message="[$1]"
      URL="${SERVER_ADDR}/api/checkCallBack"
      URL_IP="${SERVER_IP_ADDR}/api/checkCallBack"
      SendRequest $URL
      if [ "$SEND_SUCCESS" != "true" ];then
        SendRequest $URL_IP
      fi
      if [ "$SEND_SUCCESS" != "true" ];then
        echo "[l-zero] send callback message to server:$REAL_URL failed."
      else
        echo "[l-zero] send callback message to server:$REAL_URL succeeded."
      fi

      if [ "${CONTROLLER_TYPE}" == "daemonset" ];then
        sleep 600
      fi
      exit 0
    }

    Record() {
      if [[ $# -lt 4 ]];then
        echo "Usage: Record TestName TestSuite Status Message [TestNameCN Level TargetType Target Solution]"
        exit 1
      fi
      TestName=$1
      TestSuite=$2
      Status=$3
      Message=$4
      TestNameCN=$5
      Level=$6
      TargetType=$7
      Target=$8
      Solution=$9

      if [[ "${TestNameCN}" == "" ]];then
        TestNameCN=${TestName}
      fi

      if [[ "${Level}" == "" ]];then
        Level="critical"
      fi

      nowTime=`date +%s`
      let resultTime=$(($nowTime - $lastTime))
      lastTime=$nowTime
      newResult="{\"testName\":\"${TestName}\",\"testSuite\":\"${TestSuite}\",\"status\":\"${Status}\",\"message\":\"${Message}\",\"time\":${resultTime},\"targetType\":\"${TargetType}\",\"target\":\"${Target}\",\"testNameCN\":\"${TestNameCN}\",\"level\":\"${Level}\",\"solution\":\"${Solution}\"}"

      if [[ "$TestResults" == "" ]];then
        TestResults=${newResult}
      else
        TestResults=${TestResults},${newResult}
      fi
    }

    Lzero_Return() {
      Return $@
    }

    Callback() {
      Return $@
    }

    Upload() {
      if [[ $# -ne 1 ]];then
        echo "Usage: Upload FILE_PATH"
        exit 1
      fi
      if [[ ! -f $1 ]];then
        echo "file:$1 not exist, please check."
        exit 1
      fi
      filename=${NAMESPACE}_${TASK_NAME}_${1##*/}
      if [[ "${CONTROLLER_TYPE}" == "daemonset" ]];then
        filename=${filename}_${HOST_IP}
      fi
      mv $1 ${filename}
      URL="${SERVER_ADDR}/api/file"
      URL_IP="${SERVER_IP_ADDR}/api/file"

      SEND_SUCCESS=false
      REAL_URL=${URL}
      for i in `seq 1 5`;do
        curl -F "file=@${filename}" \
          ${REAL_URL} >/dev/null 2>&1
        if [ $? -eq 0 ];then
          SEND_SUCCESS=true
          break
        fi
        sleep 5
      done

      if [[ "$SEND_SUCCESS" != "true" ]];then
        REAL_URL=${URL_IP}
        for i in `seq 1 5`;do
          curl -F "file=@${filename}" \
            ${REAL_URL} >/dev/null 2>&1
          if [[ $? -eq 0 ]];then
            SEND_SUCCESS=true
            break
          fi
          sleep 5
        done
      fi
      if [[ "$SEND_SUCCESS" != "true" ]];then
        echo "[l-zero] upload file to server:$REAL_URL failed."
        exit 1
      else
        echo "[l-zero] upload file to server:$REAL_URL succeeded."
      fi
    }

    GetPodIp() {
      echo ${1%,*}
    }

    GetNodeIp() {
      echo ${1#*,}
    }

    WrapIPAndPort() {
      if [[ $1 =~ .*:.* ]];then
        echo "[${1}]:${2}"
      else
        echo "${1}:${2}"
      fi
    }

    CreatePod() {
      export TARGET_POD_NAME="${INSTANCE_NAME}-target"
      kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME}
      if [ `echo $?` -eq 0 ]; then
          echo "pod already exist"
          for i in `seq 1 18`;do
            local phase=`kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME} -ojsonpath='{.status.phase}'`
            if [ "$phase" == "Running" ];then
              export TARGET_POD_NAME="${TARGET_POD_NAME}"
              export TARGET_POD_IP=`kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME} -ojsonpath='{.status.podIP}'`
              export TARGET_POD_URL=`WrapIPAndPort ${TARGET_POD_IP} 80`
              return 0
            fi
            echo "wait pod ready"
            sleep 10
          done
          echo "wait for target pod ready timeout."
          return 1
      fi
      kubectl apply -f -<<EOF
    ---
    apiVersion: v1
    kind: Pod
    metadata:
      name: ${TARGET_POD_NAME}
      namespace: ${NAMESPACE}
      labels:
        app: ${TARGET_POD_NAME}
        trident.apsara-stack.alibaba-inc.com/task-generated: "true"
      ownerReferences:
      - apiVersion: v1
        blockOwnerDeletion: true
        controller: true
        kind: Pod
        name: ${POD_NAME}
        uid: ${POD_UID}
    spec:
      containers:
      - image: ${REGISTRY_URL}/ecp_builder/httpd:alpine3.15
        imagePullPolicy: IfNotPresent
        name: main
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      tolerations:
      - effect: NoSchedule
        operator: Exists
    EOF
      ret=$?
      if [ $ret -ne 0 ];then
        sleep 5
        if ! kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME} &>/dev/null;then
          return $ret
        fi
      fi
      for i in `seq 1 18`;do
        sleep 10
        local phase=`kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME} -ojsonpath='{.status.phase}'`
        if [ "$phase" == "Running" ];then
          export TARGET_POD_NAME="${TARGET_POD_NAME}"
          export TARGET_POD_IP=`kubectl -n ${NAMESPACE} get pod ${TARGET_POD_NAME} -ojsonpath='{.status.podIP}'`
          export TARGET_POD_URL=`WrapIPAndPort ${TARGET_POD_IP} 80`
          return 0
        fi
      done
      echo "wait for target pod ready timeout."
      return 1
    }

    CreatePodWithService() {
      if ! CreatePod;then
        return 1
      fi
      export TARGET_SVC_NAME="${INSTANCE_NAME}-target"
      kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME}
      if [ `echo $?` -eq 0 ]; then
          echo "svc already exist"
          export TARGET_CLUSTER_IP=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.clusterIP}'`
          export TARGET_PORT=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.ports[0].port}'`
          export TARGET_NODEPORT=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.ports[0].nodePort}'`
          export TARGET_SVC_URL=`WrapIPAndPort ${TARGET_CLUSTER_IP} ${TARGET_PORT}`
          export TARGET_NODEPORT_URL=`WrapIPAndPort ${HOST_IP} ${TARGET_NODEPORT}`
          return 0
      fi
      kubectl apply -f -<<EOF
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${TARGET_SVC_NAME}
        trident.apsara-stack.alibaba-inc.com/task-generated: "true"
      name: ${TARGET_SVC_NAME}
      namespace: ${NAMESPACE}
      ownerReferences:
      - apiVersion: v1
        blockOwnerDeletion: true
        controller: true
        kind: Pod
        name: ${POD_NAME}
        uid: ${POD_UID}
    spec:
      ports:
      - name: test
        port: 80
        protocol: TCP
        targetPort: 80
      selector:
        app: ${TARGET_SVC_NAME}
      type: NodePort
    EOF
      ret=$?
      if [ $ret -ne 0 ];then
        sleep 15
        if ! kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} &>/dev/null;then
          return $ret
        fi
      fi
      sleep 15
      export TARGET_CLUSTER_IP=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.clusterIP}'`
      export TARGET_PORT=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.ports[0].port}'`
      export TARGET_NODEPORT=`kubectl -n ${NAMESPACE} get svc ${TARGET_SVC_NAME} -ojsonpath='{.spec.ports[0].nodePort}'`
      export TARGET_SVC_URL=`WrapIPAndPort ${TARGET_CLUSTER_IP} ${TARGET_PORT}`
      export TARGET_NODEPORT_URL=`WrapIPAndPort ${HOST_IP} ${TARGET_NODEPORT}`
      return 0
    }

    getNetworkInfo(){
      cnt=$(kubectl get ds -n kube-system | grep -w calico | wc -l)
      if [[ ${cnt} != "0" ]]; then
          export NETWORK="calico"
          export CNI_TYPE=overlay
      fi
      cnt=$(kubectl get ds -n kube-system | grep -w nimitz | wc -l)
      if [[ ${cnt} != "0" ]]; then
          export NETWORK="nimitz"
          export CNI_TYPE=overlay
      fi
      cnt=$(kubectl get ds -n kube-system | grep -w terway-vlan | wc -l)
      if [[ ${cnt} != "0" ]]; then
          export NETWORK="terway-vlan-dhcp"
          export CNI_TYPE=underlay
      fi
      cnt=$(kubectl get ds -n kube-system | grep -w rama-daemon | wc -l)
      if [[ ${cnt} != "0" ]]; then
          export NETWORK="rama"
          export CNI_TYPE=underlay
      fi
    }

    # check daemonset ready
    checkDsReady(){
      timeout=120
      counter=0
      while [[ true ]]; do
        desiredNumberScheduled=`kubectl -n $NAMESPACE get ds -l trident.apsara-stack.alibaba-inc.com/instance-name=$INSTANCE_NAME -ojsonpath='{.items[0].status.desiredNumberScheduled}'`
        numberAvailable=`kubectl -n $NAMESPACE get ds -l trident.apsara-stack.alibaba-inc.com/instance-name=$INSTANCE_NAME -ojsonpath='{.items[0].status.numberAvailable}'`
        if [ "$desiredNumberScheduled" == "$numberAvailable"  ];then
          runningNumber=`kubectl -n $NAMESPACE get pod -l trident.apsara-stack.alibaba-inc.com/instance-name=$INSTANCE_NAME |grep Running|wc -l`
          if [ "$desiredNumberScheduled" != "${runningNumber}"  ];then
            sleep 5
          else
            return 0
          fi
        fi
        counter=`expr $counter + 5`
        if [ $counter -lt $timeout ]; then
          sleep 5
        else
          echo "not match num,exit"
          return 1
        fi
      done
    }

    getNetworkInfo

    if [[ "${CONTROLLER_TYPE}" == "daemonset" ]];then
      if ! checkDsReady;then
        Return 1 "wait for daemonset timeout, please check."
      else
        sleep 10
      fi
    fi

    export POD_NODE_IP_PAIR_LIST=(`kubectl -n $NAMESPACE get po -l trident.apsara-stack.alibaba-inc.com/instance-name=$INSTANCE_NAME -ojsonpath='{range .items[*]} {.status.podIP},{.status.hostIP} {end}'`)
    export NODE_IP_LIST=(`kubectl get no -owide | grep -v STATUS | awk '{print $6}'`)